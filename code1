import math

class shapes_2D:
    def get_perimeter(self):
        pass
    def get_area(self):
        pass
    def display(self):
        print(f'{self.__class__.__name__}:')
        print(f'peimeter formula= {self.get_perimeter()}\n'
              f'area formula= {self.get_area()}')
        print(f'perimeter={self.Perimeter()}',f'area={self.Area()}')
               
class Circle(shapes_2D):
    side=1
    inp = ['radius']
    def __init__(self,list):
        self.r = list[0]
        self.perimeter = '\u03C0(radius)\u00b2'
        self.area = '\u03C0 * radius\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return  2* math.pi * self.r
    def get_area(self):
        return self.area
    def Area(self):
        return  math.pi * (self.r**2)
    def display(self):
        super().display()

class Rectangle(shapes_2D):
    side=2
    inp=['width','height']
    def __init__(self,list):
        self.a = list[0]
        self.b = list[1]
        self.perimeter = '(width+height)x2'
        self.area = 'widthxheight'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return (self.a + self.b)*2
    def get_area(self):
        return self.area
    def Area(self):
        return self.a * self.b
    def display(self):
        super().display()
 
class Square(Rectangle):
    side=1
    inp = ['side']
    def __init__(self,l):
        super().__init__([list[0],list[0]])
        self.perimeter = '(length of side)x4'
        self.area = '(length of side)\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def get_area(self):
        return self.area     
    def display(self):
        super().display()

class Triangle(shapes_2D):
    side=3
    inp = ['first side','second side','third side']
    def __init__(self,list):
        self.a = list[0]
        self.b = list[1]
        self.c = list[2]
        self.perimeter = 'a + b + c'
        self.area = '√[s(s-a)(s-b)(s-c)] , s=semi perimeter'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return self.a + self.b + self.c
    def get_area(self):
        return self.area
    def Area(self):
        s = (self.a + self.b + self.c)/2
        return math.sqrt(s*(s- self.a)*(s- self.b)*(s- self.c))
    def display(self):
        super().display()
        
class Equilateral_triangle(Triangle):
    side=1
    inp = ['side']
    def __init__(self,l):
        super().__init__([list[0],list[0],list[0]])
        self.perimeter = 'ax3'
        self.area = '√(3)/4 (length of side)\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def get_area(self):
        return self.area
    def display(self):
        super().display()   

class Regular_Pentagon(shapes_2D):
    side=1
    inp = ['side']
    def __init__(self,list):
        self.a = list[0]
        self.perimeter = '(side)x5'
        self.area = '√(5(5+2x√(5)))(a\u00b2)/4'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return (self.a)*5
    def get_area(self):
        return self.area
    def Area(self):
        return (self.a**2)* math.sqrt(5*(5+2*math.sqrt(5)))/4
    def display(self):
        super().display()

class Regular_Hexagon(shapes_2D):
    side=1
    inp = ['side']
    def __init__(self,list):
        self.a = list[0]
        self.perimeter = '(side)x6'
        self.area = '3√(3)/2 a\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return (self.a)*6
    def get_area(self):
        return self.area
    def Area(self):
        return (3*math.sqrt(3)*(self.a)**2)/2
    def display(self):
        super().display()

class shapes_3D:
    def get_volume(self):
        pass
    def get_area(self):
        pass
    def display(self):
        print(f'{self.__class__.__name__}:')
        print(f'volume formula= {self.get_volume()}\n'
              f'area formula= {self.get_area()}')
        print(f'volume={self.Volume()}',f'area={self.Area()}')      

class Sphere(shapes_3D):
    side=1
    inp = ['radius']
    def __init__(self,list):
        self.r = list[0]
        self.volume = '4/3 \u03C0r\u00b3'
        self.area = '4\u03C0r\u00b2'
    def get_volume(self):
        return self.volume
    def Volume(self):
        return (4*math.pi*self.r**3)/3
    def get_area(self):
        return self.area
    def Area(self):
        return 4*math.pi*self.r**2
    def display(self):
        super().display()
    
class Cuboid(shapes_3D):
    side=3
    inp = ['length','breadth','height']
    def __init__(self,list):
        self.l = list[0]
        self.b = list[1]
        self.h = list[2]
        self.volume = 'l x b x h'
        self.area = '2h(l+b)'
    def get_volume(self):
        return self.volume
    def Volume(self):
        return self.l*self.b*self.h
    def get_area(self):
        return self.area
    def Area(self):
        return 2*self.h
    def display(self):
        super().display()
    
class Cube(Cuboid):
    side=1
    inp = ['side'] 
    def __init__(self,list):
        super().__init__([list[0],list[0],list[0]])
        self.volume = 'a\u00b3'
        self.area = '6a\u00b2'
    def get_volume(self):
        return self.volume
    def get_area(self):
        return self.area
    def display(self):
        super().display()
        
class Cylinder(shapes_3D):
    side=2
    inp = ['radius','height']            
    def __init__(self,list):
        self.r = list[0]
        self.h = list[1]
        self.volume ='\u03C0r\u00b2h'
        self.area = '2\u03C0r(h+r)'
    def get_volume(self):
        return self.volume
    def Volume(self):
        return math.pi*(self.r**2)*self.h
    def get_area(self):
        return self.area
    def Area(self):
        return math.pi*2*self.r*(self.h+self.r)
    def display(self):
        super().display()
        
class Cone(shapes_3D):
    side=3
    inp = ['radius','height','slant height']
    def __init__(self,list):
        self.r = list[0]
        self.h = list[1]
        self.l = list[2]
        self.volume = '1/3\u03C0r\u00b2h'
        self.area = '\u03C0r(l+r)'
    def get_volume(self):
        return self.volume
    def Volume(self):
        return math.pi*self.h*(self.r**2)/3
    def get_area(self):
        return self.area
    def Area(self):
        return math.pi*self.r*(self.l+self.r)
    def display(self):
        super().display()

class Triangular_Prism(shapes_3D):
    side=3
    inp = ['base','height of thebase triangle','height of the prism']
    def __init__(self,list):
        self.b = list[0]
        self.h = list[1]
        self.H = list[2]
        self.volume = 'Area of base X Height of the prism'
        self.area = '2( Area of the base) + ( Perimeter of the base x height of the prism)'
    def get_volume(self):
        return self.volume
    def Volume(self):
        return self.b*self.h*self.H/2
    def get_area(self):
        return self.area
    def Area(self):
        return self.h*self.b+(3*self.b*self.H)
    def display(self):
        super().display()    
        
dimension = int(input('enter 2 for 2_D and 3 for 3_D:')) 
       
if dimension==2:
    shapes = {
          'Rectangle': Rectangle,
          'Triangle': Triangle,
          'Circle': Circle,
          'Square': Square,
          'Equilateraltriangle': Equilateral_triangle,
          'Regularpentagon':Regular_Pentagon,
          'Regularhexagon':Regular_Hexagon
        }

    shape_type = input("What type of 2_D shape?").capitalize()
    try:
          shape = shapes[shape_type]
          list=[]
          for i in range(shape.side):
              l=eval(input('enter length of {}:'.format(i for i in shape.inp)))
              list.append(l)
          wanted = shape(list).display()
    except KeyError:
          print("That's not a possible type of shape.")
          
elif dimension==3:  
    shapes = {
      'Sphere': Sphere,
      'Cube': Cube,
      'Cuboid': Cuboid,
      'Cylinder': Cylinder,
      'Cone' : Cone,
      'Triangular_Prism' : Triangular_Prism
    }
    shape_type = input("What type of 3_D shape?").capitalize()
    try:
          shape = shapes[shape_type]
          list=[]
          for i in range(shape.side):
              l=eval(input('enter length of {}:'.format(i for i in shape.inp)))
              list.append(l)
          wanted = shape(list).display()
    except KeyError:
          print("That's not a possible type of shape.")

    
    
