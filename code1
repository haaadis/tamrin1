import math

class shapes_2D:
    def get_perimeter(self):
        pass
    def get_area(self):
        pass
    def display(self):
        print(f'{self.__class__.__name__}:')
        print(f'peimeter formula= {self.get_perimeter()}\n'
              f'area formula= {self.get_area()}')
        print(f'perimeter={self.Perimeter()}',f'area={self.Area()}')
               
class Circle(shapes_2D):
    side=1
    def __init__(self,list):
        self.r = list[0]
        self.perimeter = '2\u03C0 x radius'
        self.area = '\u03C0(radius)\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return  2* math.pi * self.r
    def get_area(self):
        return self.area
    def Area(self):
        return  math.pi * (self.r**2)
    def display(self):
        super().display()

class Rectangle(shapes_2D):
    side=2
    def __init__(self,list):
        self.a = list[0]
        self.b = list[1]
        self.perimeter = '(width+height)x2'
        self.area = 'widthxheight'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return (self.a + self.b)*2
    def get_area(self):
        return self.area
    def Area(self):
        return self.a * self.b
    def display(self):
        super().display()
 
class Square(Rectangle):
    side=1
    def __init__(self,l):
        super().__init__([list[0],list[0]])
        self.perimeter = '(length of side)x4'
        self.area = '(length of side)\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def get_area(self):
        return self.area     
    def display(self):
        super().display()

class Triangle(shapes_2D):
    side=3
    def __init__(self,list):
        self.a = list[0]
        self.b = list[1]
        self.c = list[2]
        self.perimeter = 'a + b + c'
        self.area = '√[s(s-a)(s-b)(s-c)] , s=semi perimeter'
    def get_perimeter(self):
        return self.perimeter
    def perimeter(self):
        return self.a + self.b + self.c
    def get_area(self):
        return self.area
    def Area(self):
        s = (self.a + self.b + self.c)/2
        return math.sqrt(s*(s- self.a)*(s- self.b)*(s- self.c))
    def display(self):
        super().display()
        
class Equilateral_triangle(Triangle):
    side=1
    def __init__(self,l):
        super().__init__([list[0],list[0],list[0]])
        self.perimeter = 'ax3'
        self.area = '√(3)/4 (length of side)\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def get_area(self):
        return self.area
    def display(self):
        super().display()   

class Regular_Pentagon(shapes_2D):
    side=1
    def __init__(self,list):
        self.a = list[0]
        self.perimeter = '(side)x5'
        self.area = '√(5(5+2x√(5)))(a\u00b2)/4'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return (self.a)*5
    def get_area(self):
        return self.area
    def Area(self):
        return (self.a**2)* math.sqrt(5*(5+2*math.sqrt(5)))/4
    def display(self):
        super().display()

class Regular_Hexagon(shapes_2D):
    side=1
    def __init__(self,list):
        self.a = list[0]
        self.perimeter = '(side)x6'
        self.area = '3√(3)/2 a\u00b2'
    def get_perimeter(self):
        return self.perimeter
    def Perimeter(self):
        return (self.a)*6
    def get_area(self):
        return self.area
    def Area(self):
        return (3*math.sqrt(3)*(self.a)**2)/2
    def display(self):
        super().display()
        
shapes = {
      'Rectangle': Rectangle,
      'Triangle': Triangle,
      'Circle': Circle,
      'Square': Square,
      'Equilateraltriangle': Equilateral_triangle,
      'Regularpentagon':Regular_Pentagon,
      'Regularhexagon':Regular_Hexagon
    }

shape_type = input("What type of 2_D shape?").capitalize()
try:
      shape = shapes[shape_type]
      list=[]
      for i in range(shape.side):
          l=eval(input('enter length of side:'))
          list.append(l)
      wanted = shape(list).display()

except KeyError:
      print("That's not a possible type of shape.")

 
